type Result {
  MakeResult(Int, String)
}

parse-factor-(sum: Int, expr: String): Result {
  if (lte(count(expr), 0)) MakeResult(sum, expr)
  else let c = at(expr, 0) {
    if (and(gte(c, '0'), lte(c, '9'))) {
      parse-factor-(add(mul(10, sum), sub(c, '0')), substr(expr, 1))
    } else MakeResult(sum, expr)
  }
}

parse-factor(e: String): Result {
  parse-factor-(0, e)
}

eval-term-(pair: Result): Result {
  let MakeResult(lhs, expr) = pair {
    if (lte(count(expr), 0)) pair
    else let lookahead = at(expr, 0)
          expr = substr(expr, 1) {
      if (or(equals(lookahead, '*'), equals(lookahead, '/'))) {
        let MakeResult(rhs, expr) = parse-factor(expr) {
          let res = if (equals(lookahead, '*')) mul(lhs, rhs) else div(lhs, rhs) {
            eval-term-(MakeResult(res, expr))
          }
        }
      } else pair
    }
  }
}

eval-term(expr: String): Result {
  eval-term-(parse-factor(expr))
}

eval-expr-(pair: Result): Result {
  let MakeResult(lhs, expr) = pair {
    if (lte(count(expr), 0)) pair
    else let lookahead = at(expr, 0)
             expr = substr(expr, 1) {
      if (or(equals(lookahead, '+'), equals(lookahead, '-'))) {
        let MakeResult(rhs, expr) = eval-term(expr) {
          let res = if (equals(lookahead, '+')) add(lhs, rhs) else sub(lhs, rhs) {
            eval-expr-(MakeResult(res, expr))
          }
        }
      } else pair
    }
  }
}

eval-expr(e: String): Result {
  eval-expr-(eval-term(e))
}

eval(e: String): Int {
  let MakeResult(res, _) = eval-expr(e) {
    res
  }
}

print(eval("22"))
print(eval("22+22"))
print(eval("22-11"))
print(eval("10+51-17"))
print(eval("3*5+10"))
print(eval("10+3*5+10"))
