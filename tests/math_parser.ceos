type Result {
  Result(Int, String)
}

fn _parseFactor(sum: Int, expr: String) -> Result {
  if (!count(expr)) Result(sum, expr)
  else let c = at(expr, 0) {
    if (c >= '0' && c <= '9') {
      _parseFactor(10 * sum + c - '0', substr(expr, 1))
    } else Result(sum, expr)
  }
}

fn parseFactor(e: String) -> Result {
  _parseFactor(0, e)
}

fn _evalTerm(pair: Result) -> Result {
  let Result(lhs, expr) = pair {
    if (!count(expr)) pair
    else let lookahead = at(expr, 0)
          expr = substr(expr, 1) {
      if (lookahead == '*' || lookahead == '/') {
        let Result(rhs, expr) = parseFactor(expr) {
          let res = if (lookahead == '*') lhs * rhs else lhs / rhs {
            _evalTerm(Result(res, expr))
          }
        }
      } else pair
    }
  }
}

fn evalTerm(expr: String) -> Result {
  _evalTerm(parseFactor(expr))
}

fn _evalExpr(pair: Result) -> Result {
  let Result(lhs, expr) = pair {
    if (!count(expr)) pair
    else let lookahead = at(expr, 0)
             expr = substr(expr, 1) {
      if (lookahead == '+' || lookahead == '-') {
        let Result(rhs, expr) = evalTerm(expr) {
          let res = if (lookahead == '+') lhs + rhs else lhs - rhs {
            _evalExpr(Result(res, expr))
          }
        }
      } else pair
    }
  }
}

fn evalExpr(e: String) -> Result {
  _evalExpr(evalTerm(e))
}

fn eval(e: String) -> Int {
  let Result(res, _) = evalExpr(e) {
    res
  }
}

print(eval("22"))
print(eval("22+22"))
print(eval("22-11"))
print(eval("10+51-17"))
print(eval("3*5+10"))
print(eval("10+3*5+10"))
