type Result {
  MakeResult(Int, String)
}

parse-factor-(sum: Int, expr: String): Result {
  if (!count(expr)) MakeResult(sum, expr)
  else let c = at(expr, 0) {
    if (c >= '0' && c <= '9') {
      parse-factor-(10 * sum + c - '0', substr(expr, 1))
    } else MakeResult(sum, expr)
  }
}

parse-factor(e: String): Result {
  parse-factor-(0, e)
}

eval-term-(pair: Result): Result {
  let MakeResult(lhs, expr) = pair {
    if (!count(expr)) pair
    else let lookahead = at(expr, 0)
          expr = substr(expr, 1) {
      if (lookahead == '*' || lookahead == '/') {
        let MakeResult(rhs, expr) = parse-factor(expr) {
          let res = if (lookahead == '*') lhs * rhs else lhs / rhs {
            eval-term-(MakeResult(res, expr))
          }
        }
      } else pair
    }
  }
}

eval-term(expr: String): Result {
  eval-term-(parse-factor(expr))
}

eval-expr-(pair: Result): Result {
  let MakeResult(lhs, expr) = pair {
    if (!count(expr)) pair
    else let lookahead = at(expr, 0)
             expr = substr(expr, 1) {
      if (lookahead == '+' || lookahead == '-') {
        let MakeResult(rhs, expr) = eval-term(expr) {
          let res = if (lookahead == '+') lhs + rhs else lhs - rhs {
            eval-expr-(MakeResult(res, expr))
          }
        }
      } else pair
    }
  }
}

eval-expr(e: String): Result {
  eval-expr-(eval-term(e))
}

eval(e: String): Int {
  let MakeResult(res, _) = eval-expr(e) {
    res
  }
}

print(eval("22"))
print(eval("22+22"))
print(eval("22-11"))
print(eval("10+51-17"))
print(eval("3*5+10"))
print(eval("10+3*5+10"))
