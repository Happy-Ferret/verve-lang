// RUN: %not %verve | %check

interface Intish<T> {
  fn to_int(T) -> Int
}

fn g'<T>(x: T) -> Int {
  to_int(x) // CHECK: No instance of Intish found for type 'T.*
}

implementation Intish<Int> {
  fn to_int(x: Int) -> Bool {
    True // CHECK-L: Failed to unify Int with Bool
  }
}

implementation Intish<Bool> {
  fn to_bool(x: Bool) -> Bool { x } // CHECK-L: Implementing function to_bool but it's not part of the interface Intish
}

implementation Intish<Bool> {} // CHECK-L: Function to_int missing from implementation of Intish

implementation Intish<Int> {
  fn to_int(x: Int) -> Int { x }
}

implementation Intish<Bool> {
  fn to_int(x: Bool) -> Int {
    if x { 1 } else { 0 }
  }
}

interface Math<T: Intish> {
  fn add(T, T) -> Int
}

implementation Math<Bool> {
  fn add(x: Bool, y: Bool) -> Int { 0 }
}

implementation Math<Int> {
  // CHECK-L: Failed to unify Int with Bool
  fn add(x: Bool, y: Bool) -> Int { 0 }
}

enum Maybe<T> {
  None
  Some(T)
}

// CHECK-L: Trying to implement Intish for Maybe<Int>, but Maybe<Int> should be a simple type, class or enum (monomorphic)
implementation Intish< Maybe<Int> > {
}
