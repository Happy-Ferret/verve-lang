// RUN: %verve

fn f(x: Int) -> Int { x }
f(42)
f(100_000)
f(f(42))

fn id<T>(x: T) -> T { x }
id<Int>(2)
id(id)(id)(id)(id)(fn f<T>(x: T) -> T { x })(42)

fn g(h: (Int) -> Int) -> Void {}
g(f)
g(id)
g(fn x(x: Int) -> Int { x })
g(fn x<T>(x: T) -> T { x })

fn h(x: (Int) -> Int) -> Int { x(42) }
h(f)
h(id)

fn apply<T>(f: (T) -> T, x: T) -> T { f(x) }
apply<Int>(f, 42)
apply(id)
apply(id)(id)(42)
apply(id)(id)(id)
apply(f, 42)
apply(f)(42)
apply(id)(apply)(id)(apply)(id)(f)(42)

// testing newline rules

(fn x(y: Int) -> Int {

  y

  y

  y

})(42)


(fn x(y: Int) -> Int {
  y
})(42)

(fn x(y: Int) -> Void {
})(42)

(fn x(y: Int) -> Void {})(42)

enum Unit { Unit_ }

fn apply'<T, U>(f: (T) -> U, x: T) -> U { f(x) }
fn f(x: Int) -> Int { 7 }
apply'(f, 8)
fn g(x: Int) -> Void { }
apply'(g, 3)
fn h(x: Unit) -> Int { 13 }
apply'(h, Unit_)

fn f(x: Type) -> Type { x }
f(Int)
