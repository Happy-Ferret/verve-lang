// RUN: %verve | %check

enum Wrap {
  W(Int)
}

match W(42) {
  case W(x): x
} // CHECK: 42 : Int

enum Bool {
  True
  False
}

match True {
  case x: x
} // CHECK: True : Bool

enum PairT<T, U> {
  Pair(T, U)
}

match Pair(2, True) {
  case Pair(x, _): x
} // CHECK: 2 : Int

match Pair(2, True) {
  case Pair(_, y): y
} // CHECK: True : Bool

enum List<T> {
  Nil
  Cons(T, List<T>)
}

enum Nat {
  Z
  S(Nat)
}

fn length<T>(l: List<T>) -> Nat {
  match l {
    case Nil: Z
    case Cons(_, tail): S(length(tail))
  }
}

length(Nil) // CHECK: Z : Nat
length(Cons(1, Nil)) // CHECK-L: S(Z) : Nat
length(Cons(1, Cons(2, Cons(3, Nil)))) // CHECK-L: S(S(S(Z))) : Nat

fn add(x: Nat, y: Nat) -> Nat {
  match x {
    case Z: y
    case S(x'): S(add(x', y))
  }
}
add(S(S(Z)), S(S(S(Z)))) // CHECK-L: S(S(S(S(S(Z))))) : Nat
