// RUN: %verve | %check

operator (x: Int) + (y: Int) -> Int {
  int_add(x, y)
}

3 + 5 // 8 : Int

interface Num<T> {
  #assoc(left)
  operator (T) + (T) -> T

  #assoc(left) #prec(equal(+))
  operator (T) - (T) -> T

  #assoc(left) #prec(higher(+))
  operator (T) * (T) -> T

  #assoc(left) #prec(equal(*))
  operator (T) / (T) -> T
}

implementation Num<Int> {
  operator (x: Int) + (y: Int) -> Int {
    int_add(x, y)
  }
  operator (x: Int) - (y: Int) -> Int {
    int_sub(x, y)
  }
  operator (x: Int) * (y: Int) -> Int {
    int_mul(x, y)
  }
  operator (x: Int) / (y: Int) -> Int {
    int_div(x, y)
  }
}

5 + 37 // CHECK: 42 : Int
5 + 3 * 15 // CHECK: 50 : Int
3 * 15 + 5 // CHECK: 50 : Int
3 * (15 + 5) // CHECK: 60 : Int
(15 + 5) * 3  // CHECK: 60 : Int
3 * 5 / 2 // CHECK: 7 : Int
5 / 2 * 3 // CHECK: 6 : Int

enum List<T> {
  Nil

  operator (T) :: (List<T>)
}

1 :: 2 :: 3 :: Nil

enum Nat {
  Z
  S(Nat)
}

fn length<T>(l: List<T>) -> Nat {
  match l {
    case Nil: Z
    // TODO: improve the pattern matching logic to support the following:
    /*case _ :: _ :: tail: S(S(length(tail)))*/
    case _ :: tail: S(length(tail))
  }
}

length(1 :: (2 :: (3 :: Nil))) // CHECK-L: S(S(S(Z))) : Nat
