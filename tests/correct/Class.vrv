// RUN: %verve | %check
class Square {
  let side : Int

  fn area() -> Int {
    int_mul(self.side, self.side)
  }
}

let x = Square { side: 10 }
x.side // CHECK-L: 10 : Int
x.area() // CHECK-L: 100 : Int

fn area_(s: Square) -> Int {
  42
}
x.area_() // CHECK-L: 42 : Int

interface Shape<T> {
  let area : (T) -> Int
}

implementation Shape<Square> {
  fn area(x) {
    int_mul(x.side, x.side)
  }
}

area(x) // CHECK-L: 100 : Int
x.area() // CHECK-L: 100 : Int

// Mutual recursion
enum Nat {
  Z
  S(Nat)
}

class C {
  fn even(x: Nat) -> Bool {
    match x {
      case Z: True
      case S(y): self.odd(y)
    }
  }

  fn odd(x: Nat) -> Bool {
    match x {
      case Z: False
      case S(y): self.even(y)
    }
  }
}

C{}.even(Z) // CHECK-L: True : Bool
C{}.odd(S(Z)) // CHECK-L: True : Bool
C{}.even(S(S(Z))) // CHECK-L: True : Bool
C{}.odd(S(S(Z))) // CHECK-L: False : Bool
C{}.odd(S(S(S(Z)))) // CHECK-L: True : Bool
C{}.even(S(S(S(Z)))) // CHECK-L: False : Bool
C{}.even(S(S(S(S(Z))))) // CHECK-L: True : Bool

// Polymorphic classes
enum List<U> {
  Nil
  Cons(U, List<U>)
}

// TODO: add support for polymorphic classes
/*class Stack<T> {*/
  /*let _stack : List<T>*/

  /*fn peek() -> T {*/
    /*match self._stack {*/
      /*case Cons(x, _): x*/
    /*}*/
  /*}*/

  /*fn push(x: T) -> Stack<T> {*/
    /*Stack<T>(_stack: Cons(x, self._stack))*/
  /*}*/

  /*fn pop() -> Stack<T> {*/
    /*match self._stack {*/
      /*case Cons(_, tail):*/
        /*Stack<T>(_stack: tail)*/
    /*}*/
  /*}*/
/*}*/

/*let s = Stack<Int>(_stack: Cons(42, Nil))*/
/*s._stack / / CHECK: 42.* List<Int>*/
/*s.peek()*/
/*let s = s.push(13).push(7)*/
/*s._stack / / CHECK: 7.*13.*42*/
/*s.peek() / / CHECK-L: 7 : Int*/
/*let s = s.pop()*/
/*s.peek() / / CHECK-L: 13 : Int*/

// TODO: Inline implementation of interfaces
/*class Rectangle : Shape {*/
  /*let width : Int*/
  /*let height : Int*/

  /*fn area() -> Int {*/
    /*int_mul(self.width, self.height)*/
  /*}*/
/*}*/
