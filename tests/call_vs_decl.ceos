/**
 * function prototypes
 */

// basic prototype
/*extern myTake<A>(List<A>, Int) -> A*/

// with callback
/*extern myMap<T, U>(List<T>, (T) -> U) -> List<U>*/

// Returning callback
extern makeThunk<T>(T) -> () -> T

/**
 * On interface
 */
interface Foo<T> {
  // virtual function - required
  virtual equals(T, T) -> Bool

  // function with default implementation - can be overriden
  /*notEquals(a: T, b: T) -> Bool {*/
    /*not(equals(a, b))*/
  /*}*/
}


fn foo() -> Void { }

fn bar(a: Int) -> Int {
  a
}

fn baz(a: () -> Int) -> Int {
  a()
}

fn _(a: Int) -> Int {
  bar(a)
}(42)

fn _() -> Void {
  foo()
}()

/*fn _(a: () -> Int) -> Int {*/
  /*baz(a)*/
/*}(fn _() -> Int { 42 })*/

print("OK")
