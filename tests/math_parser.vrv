type state {
  State(int, string)
}

type result {
  Consume(int, string)
  Break()
}

fn consume(st: state, f: (int, int, string) -> result) -> state {
  let State(acc, expr) = st {
    if !count(expr)
      st
    else
      let lookahead = at(expr, 0)
          rest = substr(expr, 1)
          result = f(lookahead, acc, rest)
      {
        match result {
          Consume(new_acc, rest) => consume(State(new_acc, rest), f)
          Break() => st
        }
      }
  }
}

fn parse_factor(expr: string) -> state {
  consume(State(0, expr), fn _(lookahead: int, sum: int, expr: string) -> result {
    if lookahead >= '0' && lookahead <= '9'
      Consume(10 * sum + lookahead - '0', expr)
    else
      Break()
  })
}


fn eval_term(expr: string) -> state {
  consume(parse_factor(expr), fn _(lookahead: int, lhs: int, expr: string) -> result {
    if lookahead != '*' && lookahead != '/'
      Break()
    else
      let State(rhs, rest) = parse_factor(expr)
          result = if lookahead == '*' lhs * rhs else lhs / rhs
      {
        Consume(result, rest)
      }
  })
}

fn eval_expr(expr: string) -> state {
  consume(eval_term(expr), fn _(lookahead: int, lhs: int, expr: string) -> result {
    if lookahead != '+' && lookahead != '-'
      Break()
    else
      let State(rhs, rest) = eval_term(expr)
          result = if lookahead == '+' lhs + rhs else lhs - rhs
      {
        Consume(result, rest)
      }
  })
}

fn eval(expr: string) -> int {
  let State(res, _) = eval_expr(expr) {
    res
  }
}

print(eval("22"))
print(eval("22+22"))
print(eval("22-11"))
print(eval("10+51-17"))
print(eval("3*5+10"))
print(eval("10+3*5+10"))
