/**
 * function prototypes
 */

// basic prototype
/*extern myTake<A>(List<A>, int) -> A*/

// with callback
/*extern myMap<T, U>(List<T>, (T) -> U) -> List<U>*/

// Returning callback
extern make_thunk<t>(t) -> () -> t

/**
 * On interface
 */
interface foo<t> {
  // virtual function - required
  virtual equals(t, t) -> int

  // function with default implementation - can be overriden
  /*notEquals(a: T, b: T) -> Bool {*/
    /*not(equals(a, b))*/
  /*}*/
}


fn foo() -> void { }

fn bar(a: int) -> int {
  a
}

fn baz(a: () -> int) -> int {
  a()
}

fn _(a: int) -> int {
  bar(a)
}(42)

fn _() -> void {
  foo()
}()

/*fn _(a: () -> int) -> int {*/
  /*baz(a)*/
/*}(fn _() -> int { 42 })*/

print("OK")
