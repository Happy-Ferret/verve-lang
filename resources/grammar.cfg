start -> e | decl start

decl -> interface | implementation | extern | expr | type_decl

expr(prec) -> factor {binop expr(q)}

factor -> "(" expr ")" | unop_prefix expr(q) | NUMBER | STRING | call_function_or_id | if | let | list | match

binop -> "+" | "-" | "*" | "/" | "%" | ">" | "<" | ">=" | "<=" | "&&" | "||" | "==" | "!="

unop_prefix -> "!" | "-"

list -> "[" args_list "]"

type_decl -> "type" ID "{" type_constructors "}"

type_constructors -> ID "(" type type_list' ")" type_constructors'

type_constructors' -> e | type_constructors

interface -> "inteface" ID "<" ID ">" "{" interface_block "}"

interface_block -> e | interface_decl interface_block

interface_decl -> virtual | function

implementation -> "implementation" ID "<" type ">" "{" implementation_block "}"

implementation_block -> e | implementation_decl implementation_block

implementation_decl -> typeless_function | extern

typeless_function -> "fn" ID "(" id_list ")" body

id_list -> e | ID id_list'

id_list' -> e | "," ID id_list'

virtual -> "virtual" prototype

extern -> "extern" prototype

prototype -> "fn" ID generics "(" type_list ")" "->" type

function -> "fn" ID generics "(" function_params ")" "->" type body

generics -> e | "<" ID id_list' ">"

function_params -> e | function_param function_params'

function_params' -> e | "," function_param function_params'

function_param -> ID ":" type

type_list -> e | type type_list'

type_list' -> e | "," type type_list'

expr_list -> e | expr expr_list

call_function_or_id -> (ID | function) call

call -> e | "(" args_list ")" call

args_list -> e | expr args_list'

args_list' -> e | "," expr args_list

if -> "if" "(" expr ")" expr_or_body else_body

expr_or_body -> expr | body

body -> "{" expr_list "}"

else_body -> e | "else" expr_or_body

type -> id_type | function_type

id_type -> ID (e | "<" type type_list' ">")

function_type -> "(" type_list ")" "->" type

let -> "let" let_decls body

let_decls -> let_lhs "=" expr let_decls'

let_decls' -> e | let_decls

let_lhs -> ID ( e | "(" id_list ")" )

match -> "match" expr "{" case_list "}"

case_list -> let_lhs "->" expr_or_body (e | case_list)
