interface Stringify<T> {
  virtual stringify (T) -> String
}

implementation Stringify<Int> { }
implementation Stringify<String> { }
implementation Stringify<List<Int>> { }
implementation Stringify<List<String>> { }

extern print (Stringify) -> Void

extern count (String) -> Int
extern substr (String, Int) -> String
extern at (String, Int) -> Int

extern `+` (Int, Int) -> Int
extern `-` (Int, Int) -> Int
extern `*` (Int, Int) -> Int
extern `/` (Int, Int) -> Int
extern `%` (Int, Int) -> Int

// should be bool
extern `&&` (Int, Int) -> Int
extern `||` (Int, Int) -> Int

extern `<` (Int, Int) -> Int
extern `>` (Int, Int) -> Int

extern `<=` (Int, Int) -> Int
extern `>=` (Int, Int) -> Int

extern `==` (Int, Int) -> Int
extern `!=` (Int, Int) -> Int

extern `unary_!` (Int) -> Int
extern `unary_-` (Int) -> Int

extern `__heap-size__` () -> Int
