enum Optional<T> {
  None
  Some(T)
}

enum Either<T, U> {
  Left(T)
  Right(U)
}

interface Number<T> {
  let num_add : (T, T) -> T
  let num_sub : (T, T) -> T
  let num_mul : (T, T) -> T
  let num_div : (T, T) -> T
  let negate : (T) -> T
}

operator<T: Number> (x: T) + (y: T) -> T {
  num_add(x, y)
}
operator<T: Number> (x: T) - (y: T) -> T {
  num_sub(x, y)
}
#prec(higher(+))
operator<T: Number> (x: T) * (y: T) -> T {
  num_mul(x, y)
}
#prec(equal(*))
operator<T: Number> (x: T) / (y: T) -> T {
  num_div(x, y)
}

implementation Number<Int> {
  fn num_add(x, y) { int_add(x, y) }
  fn num_sub(x, y) { int_sub(x, y) }
  fn num_mul(x, y) { int_mul(x, y) }
  fn num_div(x, y) { int_div(x, y) }
  fn negate(x) { int_neg(x) }
}

interface Printable<T> {
  let to_string : (T) -> String
}

fn print<T: Printable>(x: T) {
  string_print(to_string(x))
}

implementation Printable<String> {
  fn to_string(s) { s }
}

/*implementation Printable<Int> {*/
  /*fn to_string(i: Int) {*/
    /*int_to_string(i)*/
  /*}*/
/*}*/

// LIST HELPERS
fn map<T, U>(f: (T) -> U, list: List<T>) -> List<U> {
  match list {
    case []: []
    // TODO: replace with value-rest
    case [x, ...rest]: Cons(f(x), map(f, rest))
  }
}

fn reduce<T, U>(f: (U, T) -> U, init: U, list: List<T>) -> U {
  match list {
    case []: init
    case [x, ...rest]:
      let init' = f(init, x)
      reduce(f, init', rest)
  }
}

fn forEach<T>(f: (T) -> Void, list: List<T>) {
  match list {
    case []:
    case [x, ...rest]:
      f(x)
      forEach(f, rest)
  }
}
