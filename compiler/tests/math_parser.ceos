(defn parseFactorR (sum expr)
  (if (gt (count expr) 0)
      ((lambda (c)
        (if (and
            (gte c '0')
            (lte c '9'))
          (parseFactorR (add (mul 10 sum) (sub c '0')) (substr expr 1))
          (list sum expr)
        )
      ) (at expr 0))
      (list sum expr)
  )
)

(defn parseFactor (e)
  (parseFactorR 0 e)
)

(defn evalExpr (e)
  ((lambda (list)
    ((lambda (left expr)
      (if (gt (count expr) 0)
        ((lambda (op expr)
          (if (equals op '+')
            (add left (evalExpr expr))
            (if (equals op '-')
              (sub left (evalExpr expr))
            )
          )
        ) (at expr 0) (substr expr 1))
        left
      )
    ) (at list 0) (at list 1))
  ) (parseFactor e))
)

(print (evalExpr "22"))
(print (evalExpr "22+22"))
(print (evalExpr "22-11"))
(print (evalExpr "10+51-17"))
